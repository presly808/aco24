package intro;import java.util.Arrays;public class TextUtils {    /**     * Method contains inside of its body three another methods.     * Each of this method defined below.     *     * @param text     * @return sorted by natural order array of unique words     */    public static String[] getUniqueSortedWords(String text) {        String[] words = getWords(text);        String[] uniqueWords = getUniqueWords(words);        return sortWords(uniqueWords);    }    /**     * @param text     * @return array with words, get from receive text     * if received argument is null     * or text length is zero     * return array with zero length     */    public static String[] getWords(String text) {        if (text == null || text.length() == 0) {            // what is the array with zero length need more info from SB:)            return new String[]{};        }        return text.split("; ");    }    /**     * @param words array with words     * @return array with unique words     */    public static String[] getUniqueWords(String[] words) {        /*Set<String> set = new HashSet<String>(Arrays.asList(words));        return set.toArray(new String[set.size()]);*/        String[] uniqueWordsArray = new String[words.length];        int j = 0;        for (int i = 0; i < words.length; i++) {            if (!hasElement(uniqueWordsArray, words[i])) {                uniqueWordsArray[j] = words[i];                j++;            }        }        String[] temp = Arrays.copyOf(uniqueWordsArray,j);        // split when you know uniqArr and j        return temp;    }    public static boolean hasElement(String[] array, String element) {        for (int i = 0; i < array.length; i++) {            if (array[i] != null && array[i].equals(element)) {                return true;            }        }        return false;    }    /**     * @param uniqueWords array with unique words     * @return sorted by natural order array of unique words     */    public static String[] sortWords(String[] uniqueWords) {        Arrays.sort(uniqueWords);        return uniqueWords;    }}