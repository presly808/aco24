  import groovy.json.JsonSlurper

allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8

    task wrapper(type: Wrapper) {
        gradleVersion = '4.5.1'
    }

    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        testCompile 'junit:junit:4.11'

        // helps to remove selfrefences in common, otherwise common would have depended on itself
        if (!project.name.equals("common")) {
            compile project(':common')
        }

        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
        // https://mvnrepository.com/artifact/com.google.guava/guava
        compile group: 'com.google.guava', name: 'guava', version: '24.0-jre'


        compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
        compile group: 'com.sparkjava', name: 'spark-core', version: '2.7.1'

        compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.9.1'
        compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.9.1'
        compile group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.9.1'
        compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.9.1'

    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                excludes = ['*view.*', '*exclude.*']
                element = "CLASS"
                limit {
                    counter = "LINE"
                    minimum = 0.50
                }
            }
        }
    }

    task copyTaskWithPatterns(type: Copy) {
        from 'src/main/java'
        from 'src/main/resources'
        into 'build/classes/java/main'
        include '**/*'
        exclude '**/*.java'
    }

    compileJava.dependsOn copyTaskWithPatterns
    compileTestJava.dependsOn compileJava
    check.dependsOn jacocoTestCoverageVerification
    check.dependsOn jacocoTestReport
}

// ./gradlew -PmyModule=SerhiiBilobrov -Ptask=week1 copyTask
task copyTask {
    doLast {
        def module_with_tests = "functional-tests"

        if (!project.hasProperty("task") || !project.hasProperty("myModule")) {
            throw new GradleException("task or myModule properties have not been set")
        }

        if (!new File("./${myModule}").exists()) {
            throw new GradleException("${myModule} module doesn't exists")
        }


        def courseJsonObj = parseJson('functional-tests/course-tasks.json')

        def taskDesc = courseJsonObj.tasks[task]
        def baseClasses = taskDesc.baseClasses;
        def testClasses = taskDesc.testClasses;

        if (!project.hasProperty("testOnly")) {
            for (def baseClass in baseClasses) {
                def intoPath = "$baseClass".endsWith(".java") ?
                        baseClass.substring(0, baseClass.lastIndexOf("/")) : baseClass

                copy {
                    from "$module_with_tests/src/main/java/$baseClass"
                    into "$myModule/src/main/java/$intoPath"
                }

            }
            println "The Base classes of $task have been copied into $myModule"
        }

        for (def testClass in testClasses) {
            def intoPath = "$testClass".endsWith(".java") ?
                    testClass.substring(0, testClass.lastIndexOf("/")) : testClass
            copy {
                from "$module_with_tests/src/test/java/$testClass"
                into "$myModule/src/test/java/$intoPath"
            }

        }
        println "The Tests classes of $task have been copied into $myModule"
    }
}



task showAllTasks() {
    doLast {
        def parsed = parseJson('functional-tests/course-tasks.json')
        def tasks = parsed.tasks;
        for (task in tasks) {
            println "$task"
        }
    }
}

def parseJson(path) {
    def jsonFile = file(path)
    def parsedJson = new JsonSlurper().parseText(jsonFile.text)
    return parsedJson
}
